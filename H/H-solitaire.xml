<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
//int array_size := 7; //has to be an odd number
//int array[array_size];
//void fillArray() {
//for (int i = 0, i &lt; array_size/2, i++) {
//array[i] := 1;
//}
//}
int board[7] := {1,1,1,0,2,2,2};
int wantedState[7] := {2,2,2,0,1,1,1};</declaration><template><name x="5" y="5">move</name><declaration>// Place local declarations here.
int i := 0;
void swap(int a,int b) {
	int tmp := a;
	a = b;
	b = tmp;
}</declaration><location id="id0" x="-104" y="-256"></location><location id="id1" x="-192" y="-240"></location><location id="id2" x="-192" y="-40"></location><location id="id3" x="-192" y="128"></location><location id="id4" x="16" y="128"></location><location id="id5" x="224" y="128"></location><location id="id6" x="224" y="-40"></location><location id="id7" x="232" y="-240"></location><location id="id8" x="16" y="-240"></location><location id="id9" x="16" y="-40"></location><init ref="id9"/><transition><source ref="id0"/><target ref="id9"/><label kind="assignment" x="-40" y="-240">i++</label><nail x="-40" y="-216"/></transition><transition><source ref="id9"/><target ref="id0"/><label kind="guard" x="-104" y="-178">i &lt; 6</label></transition><transition><source ref="id1"/><target ref="id9"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="assignment" x="-264" y="-128">swap(board[i],board[i+2])</label></transition><transition><source ref="id9"/><target ref="id2"/><label kind="guard" x="-360" y="-24">board[i] == 0 &amp;&amp; board[i+1] == 1 &amp;&amp; board[i+2] == 2</label></transition><transition><source ref="id3"/><target ref="id9"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="assignment" x="-160" y="128">swap(board[i],board[i+1])</label></transition><transition><source ref="id9"/><target ref="id4"/><label kind="guard" x="-104" y="80">board[i] == 0 &amp;&amp; board[i+1] == 2</label><label kind="comments">checking if the slot on the right of has a white</label></transition><transition><source ref="id5"/><target ref="id9"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="assignment" x="164" y="44">swap(board[i],board[i-2])</label></transition><transition><source ref="id9"/><target ref="id6"/><label kind="guard" x="60" y="-70">board[i] == 0 &amp;&amp; board[i-1] == 2 &amp;&amp; board[i-2] == 1</label><label kind="comments">checking if there is a white on the left empty and a black on the left of that</label></transition><transition><source ref="id7"/><target ref="id9"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="assignment" x="40" y="-240">swap(board[i],board[i-1])</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="guard" x="-40" y="-168">board[i] == 0 &amp;&amp; board[i-1] == 1</label><label kind="comments">Checking if the slot on the left of empty has a black</label></transition></template><system>// Place template instantiations here.
play = move();

// List one or more processes to be composed into a system.
system play;</system></nta>